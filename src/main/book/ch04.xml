<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml">
         
	<title>JUnit and TAP</title>
	
	<para><application>JUnit</application> is the most famous unit testing framework for JAVA. 
	It was created by Eric Gamma and Kent Beck.</para>
	
	<para>With <application>tap4j</application> it is possible to generate TAP output for 
	<application>JUnit</application> tests.</para>
	
	<para>There are 2 possible ways to achieve the integration between tap4j and 
	<application>JUnit</application>. One is creating a customized 
	<application>JUnit</application> RunListener. The other way is using <application>TestNG</application> 
	xml suites. In both cases it is necessary to add to the tests execution a Listener provided by 
	<application>tap4j</application>.</para>
	
	<para>Let's speak more about each possible solution.</para>
	
	<para>So, imagine we have a simple <application>JUnit</application> test class and we 
	want to make it generates <acronym>TAP</acronym> results.</para>
	
	<para>Using a JUnit test executor class</para>
	
	<example>
		<title>sample.MyJUnitTestClass.java</title>
<programlisting 
linenumbering="numbered" 
language="Java"><![CDATA[package sample;

import junit.framework.Assert;
import junit.framework.TestCase;

public class MyJUnitTestClass extends TestCase
{
	public void testEquals()
	{
		Assert.assertTrue( "O".equals( "0" ) );
	}
}]]>
</programlisting>
	</example>
	
	<para>Here we have a sample test class called MyJUnitTestClass with 1 method 
	testEquals supposed to return passed as result.</para>
	
	<para>We need then to create the <application>JUnit</application> test executor class, 
	where we must add the <application>JUnit</application> <acronym>TAP</acronym> 
	reporter listener.</para>
	
	<example>
		<title>sample.RunJUnitSuiteWithListener.java</title>
<programlisting 
linenumbering="numbered" 
language="Java"><![CDATA[package sample;

import org.junit.runner.JUnitCore;

import org.tap4j.ext.junit.JUnitTestTapReporter;

public class RunJUnitSuiteWithListener 
{
	public static void main(String[] args) 
	{
		// Create a JUnit suite
		TestSuite suite = new TestSuite();
		
		// Add every test class you want to the suite
		suite.addTestSuite(MyJUnitTestClass.class);
		
		// Instantiate a JUniteCore object
		JUnitCore core = new JUnitCore();
		
		// Add TAP Reporter Listener to the core object executor
		core.addListener(new JUnitTestTapReporter());
		
		// Run the test suite
		core.run(suite);
	}
}]]>
</programlisting>
	</example>
	
	<para>So, when we execute the RunJUnitTestWithListener class, it will run the 
	MyJUnitTestClass with the JUnitTestTapReporter listener. As a result 
	we are going to have 3 tap files. 1 for the suite, 1 for the class 1 for the method.</para>
	
	<example>
	<title>sample.MyJUnitTestClass-SUITE.tap</title>
<programlisting><![CDATA[1..1
not ok 1 - sample.MyJUnitTestClass#testEquals
  ---
  message: JUnit 4.0 Test testEquals(sample.MyJUnitTestClass)
  severity: High
  source: sample.MyJUnitTestClass#testEquals
  datetime: '2011-05-20T11:04:11'
  file: sample.MyJUnitTestClass
  line: '10'
  name: testEquals
  error: 'null'
  backtrace: "junit.framework.AssertionFailedError: null\n\tat junit.framework.Assert.fail(Assert.java:47)\n\
    \tat junit.framework.Assert.assertTrue(Assert.java:20)\n\tat junit.framework.Assert.assertTrue(Assert.java:27)\n\
    \tat sample.MyJUnitTestClass.testEquals(MyJUnitTestClass.java:10)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\
    \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\
    \tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\n\
    \tat junit.framework.TestCase.runBare(TestCase.java:134)\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\n\
    \tat junit.framework.TestResult.runProtected(TestResult.java:128)\n\tat junit.framework.TestResult.run(TestResult.java:113)\n\
    \tat junit.framework.TestCase.run(TestCase.java:124)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:243)\n\
    \tat junit.framework.TestSuite.run(TestSuite.java:238)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:243)\n\
    \tat junit.framework.TestSuite.run(TestSuite.java:238)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)\n\
    \tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:145)\n\
    \tat sample.RunJUnitSuiteWithListener.main(RunJUnitSuiteWithListener.java:56)\n"
  ...]]>
</programlisting>
	</example>
	
	<example>
	<title>sample.MyJUnitTestClass.tap</title>
<programlisting><![CDATA[1..1
not ok 1 - sample.MyJUnitTestClass#testEquals
  ---
  message: JUnit 4.0 Test testEquals(sample.MyJUnitTestClass)
  severity: High
  source: sample.MyJUnitTestClass#testEquals
  datetime: '2011-05-20T11:04:11'
  file: sample.MyJUnitTestClass
  line: '10'
  name: testEquals
  error: 'null'
  backtrace: "junit.framework.AssertionFailedError: null\n\tat junit.framework.Assert.fail(Assert.java:47)\n\
    \tat junit.framework.Assert.assertTrue(Assert.java:20)\n\tat junit.framework.Assert.assertTrue(Assert.java:27)\n\
    \tat sample.MyJUnitTestClass.testEquals(MyJUnitTestClass.java:10)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\
    \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\
    \tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\n\
    \tat junit.framework.TestCase.runBare(TestCase.java:134)\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\n\
    \tat junit.framework.TestResult.runProtected(TestResult.java:128)\n\tat junit.framework.TestResult.run(TestResult.java:113)\n\
    \tat junit.framework.TestCase.run(TestCase.java:124)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:243)\n\
    \tat junit.framework.TestSuite.run(TestSuite.java:238)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:243)\n\
    \tat junit.framework.TestSuite.run(TestSuite.java:238)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)\n\
    \tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:145)\n\
    \tat sample.RunJUnitSuiteWithListener.main(RunJUnitSuiteWithListener.java:56)\n"
  ...]]>
</programlisting>
	</example>

	<example>
	<title>sample.MyJUnitTestClass#testEquals.tap</title>
<programlisting><![CDATA[1..1
not ok 1 - sample.MyJUnitTestClass#testEquals
  ---
  message: JUnit 4.0 Test testEquals(sample.MyJUnitTestClass)
  severity: High
  source: sample.MyJUnitTestClass#testEquals
  datetime: '2011-05-20T11:04:11'
  file: sample.MyJUnitTestClass
  line: '10'
  name: testEquals
  error: 'null'
  backtrace: "junit.framework.AssertionFailedError: null\n\tat junit.framework.Assert.fail(Assert.java:47)\n\
    \tat junit.framework.Assert.assertTrue(Assert.java:20)\n\tat junit.framework.Assert.assertTrue(Assert.java:27)\n\
    \tat sample.MyJUnitTestClass.testEquals(MyJUnitTestClass.java:10)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\
    \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\
    \tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\n\
    \tat junit.framework.TestCase.runBare(TestCase.java:134)\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\n\
    \tat junit.framework.TestResult.runProtected(TestResult.java:128)\n\tat junit.framework.TestResult.run(TestResult.java:113)\n\
    \tat junit.framework.TestCase.run(TestCase.java:124)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:243)\n\
    \tat junit.framework.TestSuite.run(TestSuite.java:238)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:243)\n\
    \tat junit.framework.TestSuite.run(TestSuite.java:238)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)\n\
    \tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:145)\n\
    \tat sample.RunJUnitSuiteWithListener.main(RunJUnitSuiteWithListener.java:56)\n"
  ...]]>
</programlisting>
	</example>

	<para>As we have only one test suite with one test class and only one test method, 
	all 3 files have exactly the same content about tests.</para>
		
	<para>Pay attention! When you run the executor class it is not going to show the 
	results on <application>JUnit</application> eclipse view. It runs in background 
	and generates the TAP files in the project root. You need to refresh your project 
	on navigator view to see the tap files that were generated</para>
	
	
	<para>Finally the command line for execution of the class is</para>
	
	<example>
		<programlisting><![CDATA[java -classpath %CLASSPATH%;junit-4.0.jar;jcommander-1.5.jar;commons-io-1.4.jar;
guice-2.0.jar;commons-lang-2.5.jar;bsh-2.0b4.jar;snakeyaml-1.7.jar;
aopalliance-1.0.jar;tap4j-1.4.3.jar;. RunJUnitTestWithListenerClass]]></programlisting>
	</example>
	
	
	<para>Using <application>TestNG</application> suite xml files to execute your 
	<application>JUnit</application> tests</para>
	
	<para> This is strange, but it is a very good idea. It is easy to implement 
	and works perfectly as TestNG can interpret JUnit and run just like TestNG. 
	Here, you only need to create xml suite files with the tap4j listeners, just 
	like you would do if the tests were made with TestNG. The only difference is 
	that you need to set the "junit" attribute inside "&#60;suite&#60;" branch to 
	"true". Really easy no? TestNG takes care of the rest.</para>
	
	<para>So your suite xml file will look like this:</para>
	
	<example>
	<title>sample.MyJUnitTestClass#testEquals.tap</title>
<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="JUnit tests with TestNG suite" verbose="0" parallel="false" junit="true">
  <listeners>
    <listener class-name="org.tap4j.ext.testng.SuiteTAPReporter" /> 
    <listener class-name="org.tap4j.ext.testng.TestTAPReporter" /> 
  </listeners>
  <test name="JUnit tests with TestNG suite" preserve-order="false">
    <classes>
      <class name="sample.MyJUnitTestClass"/>
    </classes>
  </test>
</suite> 
]]>
</programlisting>
	</example>
	
	<para>The results are going to be given just like in the other way.</para>
	
</chapter>